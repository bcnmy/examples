{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/MockPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IERC20Mintable.sol\";\n\ncontract MockPool is Ownable {\n    address public immutable token0;\n    address public immutable token1;\n    uint24 public immutable fee;\n\n    // Simple price representation (e.g., 3900 * 1e6 for 3900 USDC per WETH)\n    uint256 public CURRENT_PRICE_WETH_PER_USDC = 3900 * 1e6;\n\n    // Custom errors\n    error TransactionDeadlinePassed(uint256 deadline, uint256 currentTimestamp);\n    error InvalidSwapParameters(address recipient, int256 amountSpecified);\n    error InsufficientPoolBalance(\n        address token,\n        uint256 required,\n        uint256 available\n    );\n    error InsufficientUserBalance(\n        address token,\n        address user,\n        uint256 required,\n        uint256 available\n    );\n    error InsufficientAllowance(\n        address token,\n        address user,\n        uint256 required,\n        uint256 available\n    );\n    error TransferFailed(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n    error InvalidPrice(uint256 oldPrice, uint256 newPrice);\n    error MintFailed(address token, address recipient, uint256 amount);\n    error ZeroAddress();\n    error ZeroAmount();\n\n    // Events for better tracking\n    event PriceUpdated(uint256 oldPrice, uint256 newPrice);\n    event SwapExecuted(\n        address indexed recipient,\n        bool zeroForOne,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n    event PoolTokensMinted(uint256 wethAmount, uint256 usdcAmount);\n\n    constructor(\n        address _token0,\n        address _token1,\n        uint24 _fee\n    ) Ownable(msg.sender) {\n        if (_token0 == address(0) || _token1 == address(0))\n            revert ZeroAddress();\n        token0 = _token0;\n        token1 = _token1;\n        fee = _fee;\n    }\n\n    function execute(\n        bytes calldata commands,\n        bytes[] calldata inputs,\n        uint256 deadline\n    ) external payable returns (int256 amount0, int256 amount1) {\n        if (block.timestamp > deadline) {\n            revert TransactionDeadlinePassed(deadline, block.timestamp);\n        }\n\n        if (commands.length == 0) {\n            revert InvalidSwapParameters(address(0), 0);\n        }\n        (\n            address recipient,\n            bool zeroForOne,\n            int256 amountSpecified,\n            uint160 sqrtPriceLimitX96 // unused\n        ) = abi.decode(inputs[0], (address, bool, int256, uint160));\n\n        if (recipient == address(0)) revert ZeroAddress();\n        if (amountSpecified == 0) revert ZeroAmount();\n\n        return _swap(recipient, zeroForOne, amountSpecified);\n    }\n\n    function _swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified\n    ) internal returns (int256 amount0, int256 amount1) {\n        uint256 amount = uint256(\n            amountSpecified > 0 ? amountSpecified : -amountSpecified\n        );\n\n        if (zeroForOne) {\n            // WETH -> USDC\n            uint256 usdcAmount = (amount * CURRENT_PRICE_WETH_PER_USDC) / 1e18;\n\n            // Check pool's USDC balance\n            uint256 poolUsdcBalance = IERC20(token1).balanceOf(address(this));\n            if (poolUsdcBalance < usdcAmount) {\n                revert InsufficientPoolBalance(\n                    token1,\n                    usdcAmount,\n                    poolUsdcBalance\n                );\n            }\n\n            // Check sender's WETH balance\n            uint256 userWethBalance = IERC20(token0).balanceOf(msg.sender);\n            if (userWethBalance < amount) {\n                revert InsufficientUserBalance(\n                    token0,\n                    msg.sender,\n                    amount,\n                    userWethBalance\n                );\n            }\n\n            // Check allowance\n            uint256 userWethAllowance = IERC20(token0).allowance(\n                msg.sender,\n                address(this)\n            );\n            if (userWethAllowance < amount) {\n                revert InsufficientAllowance(\n                    token0,\n                    msg.sender,\n                    amount,\n                    userWethAllowance\n                );\n            }\n\n            // Execute transfers\n            bool success = IERC20(token0).transferFrom(\n                msg.sender,\n                address(this),\n                amount\n            );\n            if (!success) {\n                revert TransferFailed(\n                    token0,\n                    msg.sender,\n                    address(this),\n                    amount\n                );\n            }\n\n            success = IERC20(token1).transfer(recipient, usdcAmount);\n            if (!success) {\n                revert TransferFailed(\n                    token1,\n                    address(this),\n                    recipient,\n                    usdcAmount\n                );\n            }\n\n            emit SwapExecuted(recipient, zeroForOne, amount, usdcAmount);\n            return (int256(amount), -int256(usdcAmount));\n        } else {\n            // USDC -> WETH\n            uint256 wethAmount = (amount * 1e18) / CURRENT_PRICE_WETH_PER_USDC;\n\n            // Check pool's WETH balance\n            uint256 poolWethBalance = IERC20(token0).balanceOf(address(this));\n            if (poolWethBalance < wethAmount) {\n                revert InsufficientPoolBalance(\n                    token0,\n                    wethAmount,\n                    poolWethBalance\n                );\n            }\n\n            // Check sender's USDC balance\n            uint256 userUsdcBalance = IERC20(token1).balanceOf(msg.sender);\n            if (userUsdcBalance < amount) {\n                revert InsufficientUserBalance(\n                    token1,\n                    msg.sender,\n                    amount,\n                    userUsdcBalance\n                );\n            }\n\n            // Check allowance\n            uint256 userUsdcAllowance = IERC20(token1).allowance(\n                msg.sender,\n                address(this)\n            );\n            if (userUsdcAllowance < amount) {\n                revert InsufficientAllowance(\n                    token1,\n                    msg.sender,\n                    amount,\n                    userUsdcAllowance\n                );\n            }\n\n            // Execute transfers\n            bool success = IERC20(token1).transferFrom(\n                msg.sender,\n                address(this),\n                amount\n            );\n            if (!success) {\n                revert TransferFailed(\n                    token1,\n                    msg.sender,\n                    address(this),\n                    amount\n                );\n            }\n\n            success = IERC20(token0).transfer(recipient, wethAmount);\n            if (!success) {\n                revert TransferFailed(\n                    token0,\n                    address(this),\n                    recipient,\n                    wethAmount\n                );\n            }\n\n            emit SwapExecuted(recipient, zeroForOne, amount, wethAmount);\n            return (-int256(wethAmount), int256(amount));\n        }\n    }\n\n    function setCurrentPrice(uint256 newPrice) external onlyOwner {\n        if (newPrice == 0) revert ZeroAmount();\n        uint256 oldPrice = CURRENT_PRICE_WETH_PER_USDC;\n        CURRENT_PRICE_WETH_PER_USDC = newPrice;\n        emit PriceUpdated(oldPrice, newPrice);\n    }\n\n    function mintPoolTokens(\n        uint256 wethAmount,\n        uint256 usdcAmount\n    ) external onlyOwner {\n        if (wethAmount == 0 && usdcAmount == 0) revert ZeroAmount();\n\n        if (wethAmount > 0) {\n            bool success = IERC20Mintable(token0).mint(\n                address(this),\n                wethAmount\n            );\n            if (!success) revert MintFailed(token0, address(this), wethAmount);\n        }\n\n        if (usdcAmount > 0) {\n            bool success = IERC20Mintable(token1).mint(\n                address(this),\n                usdcAmount\n            );\n            if (!success) revert MintFailed(token1, address(this), usdcAmount);\n        }\n\n        emit PoolTokensMinted(wethAmount, usdcAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}