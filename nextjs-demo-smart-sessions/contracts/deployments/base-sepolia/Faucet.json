{
  "address": "0x3508FF3c93f61D4D92550448351Ee7777243228b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthDrip",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDrip",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DRIP_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_DRIP_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DRIP_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastEthDripTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastTokenDripTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "requestTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe29a229f3efe35e6c060c50879f100f8ac7855466d9b4e58a91e9974e5f3b48d",
  "receipt": {
    "to": null,
    "from": "0x3079B249DFDE4692D7844aA261f8cf7D927A0DA5",
    "contractAddress": "0x3508FF3c93f61D4D92550448351Ee7777243228b",
    "transactionIndex": 5,
    "gasUsed": "720301",
    "logsBloom": "0x
    "blockHash": "0x720c507be41b37f033332fb875495ed486e2e034d8b0ad8596f69b3001b28566",
    "transactionHash": "0xe29a229f3efe35e6c060c50879f100f8ac7855466d9b4e58a91e9974e5f3b48d",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 17951127,
        "transactionHash": "0xe29a229f3efe35e6c060c50879f100f8ac7855466d9b4e58a91e9974e5f3b48d",
        "address": "0x3508FF3c93f61D4D92550448351Ee7777243228b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da5"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x720c507be41b37f033332fb875495ed486e2e034d8b0ad8596f69b3001b28566"
      }
    ],
    "blockNumber": 17951127,
    "cumulativeGasUsed": "1158311",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1713f8e4d74d65ff0e802c63250e9681",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDrip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDrip\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DRIP_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_DRIP_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DRIP_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEthDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTokenDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"requestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Faucet is ReentrancyGuard, Ownable {\\n    uint256 public immutable ETH_DRIP_AMOUNT = 0.01 ether;\\n    uint256 public TOKEN_DRIP_AMOUNT = 10 * 10**18; // 10 tokens with 18 decimals\\n    uint256 public constant DRIP_COOLDOWN = 24 hours;\\n    \\n    mapping(address => uint256) public lastEthDripTime;\\n    mapping(address => mapping(address => uint256)) public lastTokenDripTime;\\n    \\n    event EthDrip(address indexed recipient, uint256 amount);\\n    event TokenDrip(address indexed token, address indexed recipient, uint256 amount);\\n    \\n    constructor() Ownable(msg.sender) {}\\n    \\n    receive() external payable {}\\n    \\n    function requestEth() external nonReentrant {\\n        require(\\n            block.timestamp >= lastEthDripTime[msg.sender] + DRIP_COOLDOWN,\\n            \\\"Please wait 24 hours between ETH requests\\\"\\n        );\\n        require(\\n            address(this).balance >= ETH_DRIP_AMOUNT,\\n            \\\"Insufficient ETH in faucet\\\"\\n        );\\n        \\n        lastEthDripTime[msg.sender] = block.timestamp;\\n        \\n        (bool success, ) = msg.sender.call{value: ETH_DRIP_AMOUNT}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        \\n        emit EthDrip(msg.sender, ETH_DRIP_AMOUNT);\\n    }\\n\\n    function requestTokens(address token) external nonReentrant {\\n        require(\\n            block.timestamp >= lastTokenDripTime[token][msg.sender] + DRIP_COOLDOWN,\\n            \\\"Please wait 24 hours between token requests\\\"\\n        );\\n        \\n        IERC20 tokenContract = IERC20(token);\\n        require(\\n            tokenContract.balanceOf(address(this)) >= TOKEN_DRIP_AMOUNT,\\n            \\\"Insufficient tokens in faucet\\\"\\n        );\\n        \\n        lastTokenDripTime[token][msg.sender] = block.timestamp;\\n        \\n        require(\\n            tokenContract.transfer(msg.sender, TOKEN_DRIP_AMOUNT),\\n            \\\"Token transfer failed\\\"\\n        );\\n        \\n        emit TokenDrip(token, msg.sender, TOKEN_DRIP_AMOUNT);\\n    }\\n    \\n    function withdrawEth() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    function withdrawTokens(address token) external onlyOwner {\\n        IERC20 tokenContract = IERC20(token);\\n        uint256 balance = tokenContract.balanceOf(address(this));\\n        require(\\n            tokenContract.transfer(msg.sender, balance),\\n            \\\"Token transfer failed\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0xdd908382d10d92ea8b5108961d92473782936a7f0215e99c8e43aa32c980a7de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052662386f26fc10000608052678ac7230489e8000060025534801561002757600080fd5b506001600055338061005357604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005c81610062565b506100b4565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b608051610acf6100e46000396000818161020201528181610757015281816107de01526108870152610acf6000f3fe6080604052600436106100ab5760003560e01c8063a0ef91df11610064578063a0ef91df14610197578063a504cb7c146101ac578063b7612032146101c3578063d91de3a2146101f0578063f192d0a114610224578063f2fde38b1461023957600080fd5b806323e956ac146100b757806349df728c146100e0578063580f390414610102578063715018a6146101225780638da5cb5b14610137578063968463af1461015f57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100cd60025481565b6040519081526020015b60405180910390f35b3480156100ec57600080fd5b506101006100fb3660046109e2565b610259565b005b34801561010e57600080fd5b5061010061011d3660046109e2565b610390565b34801561012e57600080fd5b5061010061061e565b34801561014357600080fd5b506001546040516001600160a01b0390911681526020016100d7565b34801561016b57600080fd5b506100cd61017a366004610a04565b600460209081526000928352604080842090915290825290205481565b3480156101a357600080fd5b50610100610632565b3480156101b857600080fd5b506100cd6201518081565b3480156101cf57600080fd5b506100cd6101de3660046109e2565b60036020526000908152604090205481565b3480156101fc57600080fd5b506100cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561023057600080fd5b506101006106ce565b34801561024557600080fd5b506101006102543660046109e2565b6108e2565b61026161091d565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ce9190610a37565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610a50565b61038b5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064015b60405180910390fd5b505050565b61039861094a565b6001600160a01b03811660009081526004602090815260408083203384529091529020546103ca906201518090610a72565b42101561042d5760405162461bcd60e51b815260206004820152602b60248201527f506c65617365207761697420323420686f757273206265747765656e20746f6b60448201526a656e20726571756573747360a81b6064820152608401610382565b6002546040516370a0823160e01b81523060048201528291906001600160a01b038316906370a0823190602401602060405180830381865afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a37565b10156104e95760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420746f6b656e7320696e206661756365740000006044820152606401610382565b6001600160a01b03828116600090815260046020818152604080842033808652925292839020429055600254925163a9059cbb60e01b81529182015260248101919091529082169063a9059cbb906044016020604051808303816000875af1158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190610a50565b6105c15760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610382565b336001600160a01b0316826001600160a01b03167f2152c9a10a5cc6be4d9bd4a25535fa0e63b7d008a8e51acde3ea3dbcda29203860025460405161060891815260200190565b60405180910390a35061061b6001600055565b50565b61062661091d565b6106306000610974565b565b61063a61091d565b6040514790600090339083908381818185875af1925050503d806000811461067e576040519150601f19603f3d011682016040523d82523d6000602084013e610683565b606091505b50509050806106ca5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610382565b5050565b6106d661094a565b336000908152600360205260409020546106f4906201518090610a72565b4210156107555760405162461bcd60e51b815260206004820152602960248201527f506c65617365207761697420323420686f757273206265747765656e2045544860448201526820726571756573747360b81b6064820152608401610382565b7f00000000000000000000000000000000000000000000000000000000000000004710156107c55760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742045544820696e206661756365740000000000006044820152606401610382565b33600081815260036020526040808220429055519091907f0000000000000000000000000000000000000000000000000000000000000000908381818185875af1925050503d8060008114610836576040519150601f19603f3d011682016040523d82523d6000602084013e61083b565b606091505b50509050806108825760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610382565b6040517f0000000000000000000000000000000000000000000000000000000000000000815233907f720609940848fa4b7e81863b27f2ee3ada3cd974364a8a00deae131be70039a69060200160405180910390a2506106306001600055565b6108ea61091d565b6001600160a01b03811661091457604051631e4fbdf760e01b815260006004820152602401610382565b61061b81610974565b6001546001600160a01b031633146106305760405163118cdaa760e01b8152336004820152602401610382565b60026000540361096d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146109dd57600080fd5b919050565b6000602082840312156109f457600080fd5b6109fd826109c6565b9392505050565b60008060408385031215610a1757600080fd5b610a20836109c6565b9150610a2e602084016109c6565b90509250929050565b600060208284031215610a4957600080fd5b5051919050565b600060208284031215610a6257600080fd5b815180151581146109fd57600080fd5b80820180821115610a9357634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122028f8e68f3a19a37e35655b29bcbc25013ded5d32c2b8a44766f45c910e5029c964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063a0ef91df11610064578063a0ef91df14610197578063a504cb7c146101ac578063b7612032146101c3578063d91de3a2146101f0578063f192d0a114610224578063f2fde38b1461023957600080fd5b806323e956ac146100b757806349df728c146100e0578063580f390414610102578063715018a6146101225780638da5cb5b14610137578063968463af1461015f57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100cd60025481565b6040519081526020015b60405180910390f35b3480156100ec57600080fd5b506101006100fb3660046109e2565b610259565b005b34801561010e57600080fd5b5061010061011d3660046109e2565b610390565b34801561012e57600080fd5b5061010061061e565b34801561014357600080fd5b506001546040516001600160a01b0390911681526020016100d7565b34801561016b57600080fd5b506100cd61017a366004610a04565b600460209081526000928352604080842090915290825290205481565b3480156101a357600080fd5b50610100610632565b3480156101b857600080fd5b506100cd6201518081565b3480156101cf57600080fd5b506100cd6101de3660046109e2565b60036020526000908152604090205481565b3480156101fc57600080fd5b506100cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561023057600080fd5b506101006106ce565b34801561024557600080fd5b506101006102543660046109e2565b6108e2565b61026161091d565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ce9190610a37565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610a50565b61038b5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064015b60405180910390fd5b505050565b61039861094a565b6001600160a01b03811660009081526004602090815260408083203384529091529020546103ca906201518090610a72565b42101561042d5760405162461bcd60e51b815260206004820152602b60248201527f506c65617365207761697420323420686f757273206265747765656e20746f6b60448201526a656e20726571756573747360a81b6064820152608401610382565b6002546040516370a0823160e01b81523060048201528291906001600160a01b038316906370a0823190602401602060405180830381865afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a37565b10156104e95760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420746f6b656e7320696e206661756365740000006044820152606401610382565b6001600160a01b03828116600090815260046020818152604080842033808652925292839020429055600254925163a9059cbb60e01b81529182015260248101919091529082169063a9059cbb906044016020604051808303816000875af1158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190610a50565b6105c15760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610382565b336001600160a01b0316826001600160a01b03167f2152c9a10a5cc6be4d9bd4a25535fa0e63b7d008a8e51acde3ea3dbcda29203860025460405161060891815260200190565b60405180910390a35061061b6001600055565b50565b61062661091d565b6106306000610974565b565b61063a61091d565b6040514790600090339083908381818185875af1925050503d806000811461067e576040519150601f19603f3d011682016040523d82523d6000602084013e610683565b606091505b50509050806106ca5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610382565b5050565b6106d661094a565b336000908152600360205260409020546106f4906201518090610a72565b4210156107555760405162461bcd60e51b815260206004820152602960248201527f506c65617365207761697420323420686f757273206265747765656e2045544860448201526820726571756573747360b81b6064820152608401610382565b7f00000000000000000000000000000000000000000000000000000000000000004710156107c55760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742045544820696e206661756365740000000000006044820152606401610382565b33600081815260036020526040808220429055519091907f0000000000000000000000000000000000000000000000000000000000000000908381818185875af1925050503d8060008114610836576040519150601f19603f3d011682016040523d82523d6000602084013e61083b565b606091505b50509050806108825760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610382565b6040517f0000000000000000000000000000000000000000000000000000000000000000815233907f720609940848fa4b7e81863b27f2ee3ada3cd974364a8a00deae131be70039a69060200160405180910390a2506106306001600055565b6108ea61091d565b6001600160a01b03811661091457604051631e4fbdf760e01b815260006004820152602401610382565b61061b81610974565b6001546001600160a01b031633146106305760405163118cdaa760e01b8152336004820152602401610382565b60026000540361096d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146109dd57600080fd5b919050565b6000602082840312156109f457600080fd5b6109fd826109c6565b9392505050565b60008060408385031215610a1757600080fd5b610a20836109c6565b9150610a2e602084016109c6565b90509250929050565b600060208284031215610a4957600080fd5b5051919050565b600060208284031215610a6257600080fd5b815180151581146109fd57600080fd5b80820180821115610a9357634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122028f8e68f3a19a37e35655b29bcbc25013ded5d32c2b8a44766f45c910e5029c964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 944,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1021,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "TOKEN_DRIP_AMOUNT",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1028,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "lastEthDripTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1034,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "lastTokenDripTime",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}