{
  "address": "0x2fFdb193580420a6962a357CD63a81aB9746bc89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPoolBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientUserBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "command",
          "type": "bytes"
        }
      ],
      "name": "InvalidCommand",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "InvalidInputLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified",
          "type": "int256"
        }
      ],
      "name": "InvalidSwapParameters",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TransactionDeadlinePassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "PoolTokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_PRICE_WETH_PER_USDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "commands",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "inputs",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "mintPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa165faee7743ae93e59f98398f59c6aff01d0330a02c4f004362336f9a96c21d",
  "receipt": {
    "to": null,
    "from": "0x3079B249DFDE4692D7844aA261f8cf7D927A0DA5",
    "contractAddress": "0x2fFdb193580420a6962a357CD63a81aB9746bc89",
    "transactionIndex": 2,
    "gasUsed": "1211301",
    "logsBloom": "0x
    "blockHash": "0x51a6afbd349b1d37dd95b32c090597de5c6ec82021b113884a7a7282bc91eca7",
    "transactionHash": "0xa165faee7743ae93e59f98398f59c6aff01d0330a02c4f004362336f9a96c21d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 18260183,
        "transactionHash": "0xa165faee7743ae93e59f98398f59c6aff01d0330a02c4f004362336f9a96c21d",
        "address": "0x2fFdb193580420a6962a357CD63a81aB9746bc89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x51a6afbd349b1d37dd95b32c090597de5c6ec82021b113884a7a7282bc91eca7"
      }
    ],
    "blockNumber": 18260183,
    "cumulativeGasUsed": "1276176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22e27b03C96C6b6049831FBFef01dD1F291C59d7",
    "0x69C759F5C92cCfFeA23e6C7252dC634aA960e44C",
    3000
  ],
  "numDeployments": 3,
  "solcInputHash": "018a6e87994021eef90b2f7c15d0990b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientPoolBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientUserBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"command\",\"type\":\"bytes\"}],\"name\":\"InvalidCommand\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"InvalidInputLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"}],\"name\":\"InvalidSwapParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"TransactionDeadlinePassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"PoolTokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_PRICE_WETH_PER_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"mintPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockPool.sol\":\"MockPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MockPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20Mintable.sol\\\";\\n\\ncontract MockPool is Ownable {\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint24 public immutable fee;\\n\\n    // Simple price representation (e.g., 3900 * 1e6 for 3900 USDC per WETH)\\n    uint256 public CURRENT_PRICE_WETH_PER_USDC = 3900 * 1e6;\\n\\n    // Custom errors\\n    error TransactionDeadlinePassed(uint256 deadline, uint256 currentTimestamp);\\n    error InvalidSwapParameters(address recipient, int256 amountSpecified);\\n    error InsufficientPoolBalance(\\n        address token,\\n        uint256 required,\\n        uint256 available\\n    );\\n    error InsufficientUserBalance(\\n        address token,\\n        address user,\\n        uint256 required,\\n        uint256 available\\n    );\\n    error InsufficientAllowance(\\n        address token,\\n        address user,\\n        uint256 required,\\n        uint256 available\\n    );\\n    error TransferFailed(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    );\\n    error InvalidPrice(uint256 oldPrice, uint256 newPrice);\\n    error MintFailed(address token, address recipient, uint256 amount);\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error InvalidCommand(bytes command);\\n    error InvalidInputLength(uint256 expected, uint256 received);\\n\\n    // Events for better tracking\\n    event PriceUpdated(uint256 oldPrice, uint256 newPrice);\\n    event SwapExecuted(\\n        address indexed recipient,\\n        bool zeroForOne,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event PoolTokensMinted(uint256 wethAmount, uint256 usdcAmount);\\n\\n    constructor(\\n        address _token0,\\n        address _token1,\\n        uint24 _fee\\n    ) Ownable(msg.sender) {\\n        if (_token0 == address(0) || _token1 == address(0))\\n            revert ZeroAddress();\\n        token0 = _token0;\\n        token1 = _token1;\\n        fee = _fee;\\n    }\\n\\n    function execute(\\n        bytes calldata commands,\\n        bytes[] calldata inputs,\\n        uint256 deadline\\n    ) external returns (int256 amount0, int256 amount1) {\\n        if (block.timestamp > deadline) {\\n            revert TransactionDeadlinePassed(deadline, block.timestamp);\\n        }\\n\\n        // Check command length\\n        if (commands.length != 1) {\\n            revert InvalidCommand(commands);\\n        }\\n\\n        // Check inputs length\\n        if (inputs.length != 1) {\\n            revert InvalidInputLength(1, inputs.length);\\n        }\\n\\n        // Get the command byte\\n        uint8 command = uint8(commands[0]);\\n\\n        // Command 0x00 or 0x01 for swap\\n        if (command != 0x00 && command != 0x01) {\\n            revert InvalidCommand(commands);\\n        }\\n\\n        // Decode swap parameters\\n        (address recipient, bool zeroForOne, int256 amountSpecified) = abi\\n            .decode(inputs[0], (address, bool, int256));\\n\\n        if (recipient == address(0)) revert ZeroAddress();\\n        if (amountSpecified == 0) revert ZeroAmount();\\n\\n        return _swap(recipient, zeroForOne, amountSpecified);\\n    }\\n\\n    function _swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified\\n    ) internal returns (int256 amount0, int256 amount1) {\\n        uint256 amount = uint256(\\n            amountSpecified > 0 ? amountSpecified : -amountSpecified\\n        );\\n\\n        if (zeroForOne) {\\n            // WETH -> USDC\\n            uint256 usdcAmount = (amount * CURRENT_PRICE_WETH_PER_USDC) / 1e18;\\n\\n            // Check WETH allowance\\n            uint256 wethAllowance = IERC20(token0).allowance(\\n                msg.sender,\\n                address(this)\\n            );\\n            if (wethAllowance < amount) {\\n                revert InsufficientAllowance(\\n                    token0,\\n                    msg.sender,\\n                    amount,\\n                    wethAllowance\\n                );\\n            }\\n\\n            // Check WETH balance\\n            uint256 wethBalance = IERC20(token0).balanceOf(msg.sender);\\n            if (wethBalance < amount) {\\n                revert InsufficientUserBalance(\\n                    token0,\\n                    msg.sender,\\n                    amount,\\n                    wethBalance\\n                );\\n            }\\n\\n            // Check pool's USDC balance\\n            uint256 poolUsdcBalance = IERC20(token1).balanceOf(address(this));\\n            if (poolUsdcBalance < usdcAmount) {\\n                revert InsufficientPoolBalance(\\n                    token1,\\n                    usdcAmount,\\n                    poolUsdcBalance\\n                );\\n            }\\n\\n            // Execute transfers\\n            bool success = IERC20(token0).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            if (!success) {\\n                revert TransferFailed(\\n                    token0,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                );\\n            }\\n\\n            success = IERC20(token1).transfer(recipient, usdcAmount);\\n            if (!success) {\\n                revert TransferFailed(\\n                    token1,\\n                    address(this),\\n                    recipient,\\n                    usdcAmount\\n                );\\n            }\\n\\n            emit SwapExecuted(recipient, zeroForOne, amount, usdcAmount);\\n            return (int256(amount), -int256(usdcAmount));\\n        } else {\\n            // USDC -> WETH\\n            uint256 wethAmount = (amount * 1e18) / CURRENT_PRICE_WETH_PER_USDC;\\n\\n            // Check USDC allowance\\n            uint256 usdcAllowance = IERC20(token1).allowance(\\n                msg.sender,\\n                address(this)\\n            );\\n            if (usdcAllowance < amount) {\\n                revert InsufficientAllowance(\\n                    token1,\\n                    msg.sender,\\n                    amount,\\n                    usdcAllowance\\n                );\\n            }\\n\\n            // Check USDC balance\\n            uint256 usdcBalance = IERC20(token1).balanceOf(msg.sender);\\n            if (usdcBalance < amount) {\\n                revert InsufficientUserBalance(\\n                    token1,\\n                    msg.sender,\\n                    amount,\\n                    usdcBalance\\n                );\\n            }\\n\\n            // Check pool's WETH balance\\n            uint256 poolWethBalance = IERC20(token0).balanceOf(address(this));\\n            if (poolWethBalance < wethAmount) {\\n                revert InsufficientPoolBalance(\\n                    token0,\\n                    wethAmount,\\n                    poolWethBalance\\n                );\\n            }\\n\\n            // Execute transfers\\n            bool success = IERC20(token1).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            if (!success) {\\n                revert TransferFailed(\\n                    token1,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                );\\n            }\\n\\n            success = IERC20(token0).transfer(recipient, wethAmount);\\n            if (!success) {\\n                revert TransferFailed(\\n                    token0,\\n                    address(this),\\n                    recipient,\\n                    wethAmount\\n                );\\n            }\\n\\n            emit SwapExecuted(recipient, zeroForOne, amount, wethAmount);\\n            return (-int256(wethAmount), int256(amount));\\n        }\\n    }\\n\\n    function setCurrentPrice(uint256 newPrice) external onlyOwner {\\n        if (newPrice == 0) revert ZeroAmount();\\n        uint256 oldPrice = CURRENT_PRICE_WETH_PER_USDC;\\n        CURRENT_PRICE_WETH_PER_USDC = newPrice;\\n        emit PriceUpdated(oldPrice, newPrice);\\n    }\\n\\n    function mintPoolTokens(\\n        uint256 wethAmount,\\n        uint256 usdcAmount\\n    ) external onlyOwner {\\n        if (wethAmount == 0 && usdcAmount == 0) revert ZeroAmount();\\n\\n        if (wethAmount > 0) {\\n            bool success = IERC20Mintable(token0).mint(\\n                address(this),\\n                wethAmount\\n            );\\n            if (!success) revert MintFailed(token0, address(this), wethAmount);\\n        }\\n\\n        if (usdcAmount > 0) {\\n            bool success = IERC20Mintable(token1).mint(\\n                address(this),\\n                usdcAmount\\n            );\\n            if (!success) revert MintFailed(token1, address(this), usdcAmount);\\n        }\\n\\n        emit PoolTokensMinted(wethAmount, usdcAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa75284602c59611ce93252a2f239234640370c7064d19cc7682b4de5d4b13394\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3ec2ae14333c5d0d5f4cad1d809e56f32a0217c805435676a84d307d5a5feeb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405263e87547006001553480156200001957600080fd5b5060405162001681380380620016818339810160408190526200003c916200013a565b33806200006357604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006e81620000cd565b506001600160a01b03831615806200008d57506001600160a01b038216155b15620000ac5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03928316608052911660a05262ffffff1660c0526200018f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013557600080fd5b919050565b6000806000606084860312156200015057600080fd5b6200015b846200011d565b92506200016b602085016200011d565b9150604084015162ffffff811681146200018457600080fd5b809150509250925092565b60805160a05160c05161141b62000266600039600061019301526000818161016c0152818161051201528181610590015281816108840152818161091801528181610a5701528181610acd01528181610bbe01528181610c3501528181610c8c01528181610d0b01528181610e4b0152610ed001526000818160a801528181610430015281816104ae015281816106e001528181610757015281816107ae0152818161082d0152818161096d015281816109f201528181610d6201528181610df601528181610f350152610fab015261141b6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063895befc411610066578063895befc4146101435780638da5cb5b14610156578063d21220a714610167578063ddca3f431461018e578063f2fde38b146101c957600080fd5b80630dfe1681146100a357806318b20071146100e75780632930c564146100fc5780633593564c14610113578063715018a61461013b575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f53660046110a4565b6101dc565b005b61010560015481565b6040519081526020016100de565b6101266101213660046110bd565b61024b565b604080519283526020830191909152016100de565b6100fa6103c5565b6100fa61015136600461118a565b6103d9565b6000546001600160a01b03166100ca565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6101b57f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016100de565b6100fa6101d73660046111c1565b610605565b6101e4610643565b8060000361020557604051631f2a200560e01b815260040160405180910390fd5b600180549082905560408051828152602081018490527f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891015b60405180910390a15050565b6000808242111561027d576040516304be294560e31b8152600481018490524260248201526044015b60405180910390fd5b600186146102a2578686604051630211d4c160e51b81526004016102749291906111e5565b600184146102cd5760405163e92afc1360e01b81526001600482015260248101859052604401610274565b6000878760008181106102e2576102e2611214565b919091013560f81c915050801580159061030057508060ff16600114155b15610322578787604051630211d4c160e51b81526004016102749291906111e5565b60008060008888600081811061033a5761033a611214565b905060200281019061034c919061122a565b8101906103599190611286565b919450925090506001600160a01b0383166103875760405163d92e233d60e01b815260040160405180910390fd5b806000036103a857604051631f2a200560e01b815260040160405180910390fd5b6103b3838383610670565b95509550505050509550959350505050565b6103cd610643565b6103d76000611054565b565b6103e1610643565b811580156103ed575080155b1561040b57604051631f2a200560e01b815260040160405180910390fd5b81156104ed576040516340c10f1960e01b8152306004820152602481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a591906112c7565b9050806104eb577f0000000000000000000000000000000000000000000000000000000000000000308460405163505066fb60e11b8152600401610274939291906112e4565b505b80156105cf576040516340c10f1960e01b8152306004820152602481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058791906112c7565b9050806105cd577f0000000000000000000000000000000000000000000000000000000000000000308360405163505066fb60e11b8152600401610274939291906112e4565b505b60408051838152602081018390527f0636773915acccd62df05f47ffd34ead6011376bdc7ca7485d1f9df3f4b61fb4910161023f565b61060d610643565b6001600160a01b03811661063757604051631e4fbdf760e01b815260006004820152602401610274565b61064081611054565b50565b6000546001600160a01b031633146103d75760405163118cdaa760e01b8152336004820152602401610274565b600080600080841361068a576106858461131e565b61068c565b835b90508415610b73576000670de0b6b3a7640000600154836106ad919061133a565b6106b79190611357565b604051636eb1769f60e11b81523360048201523060248201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190611379565b905082811015610796577f000000000000000000000000000000000000000000000000000000000000000033848360405163246fb68960e21b81526004016102749493929190611392565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611379565b90508381101561086c577f0000000000000000000000000000000000000000000000000000000000000000338583604051630af4502d60e11b81526004016102749493929190611392565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f79190611379565b9050838110156109535760405163bac59adb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810185905260448101829052606401610274565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906109a690339030908b906004016112e4565b6020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e991906112c7565b905080610a31577f000000000000000000000000000000000000000000000000000000000000000033308860405163cd3f165960e01b815260040161027494939291906113bb565b60405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac491906112c7565b905080610b0c577f0000000000000000000000000000000000000000000000000000000000000000308c8760405163cd3f165960e01b815260040161027494939291906113bb565b604080518b15158152602081018890529081018690526001600160a01b038c16907fe467d5fa0f4dfdac4bf57d810740981998c5a70ea754dad39a1db51b4196948a9060600160405180910390a285610b648661131e565b9750975050505050505061104c565b600154600090610b8b83670de0b6b3a764000061133a565b610b959190611357565b604051636eb1769f60e11b81523360048201523060248201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190611379565b905082811015610c74577f000000000000000000000000000000000000000000000000000000000000000033848360405163246fb68960e21b81526004016102749493929190611392565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611379565b905083811015610d4a577f0000000000000000000000000000000000000000000000000000000000000000338583604051630af4502d60e11b81526004016102749493929190611392565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190611379565b905083811015610e315760405163bac59adb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810185905260448101829052606401610274565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610e8490339030908b906004016112e4565b6020604051808303816000875af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec791906112c7565b905080610f0f577f000000000000000000000000000000000000000000000000000000000000000033308860405163cd3f165960e01b815260040161027494939291906113bb565b60405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906112c7565b905080610fea577f0000000000000000000000000000000000000000000000000000000000000000308c8760405163cd3f165960e01b815260040161027494939291906113bb565b604080518b15158152602081018890529081018690526001600160a01b038c16907fe467d5fa0f4dfdac4bf57d810740981998c5a70ea754dad39a1db51b4196948a9060600160405180910390a26110418561131e565b975094955050505050505b935093915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156110b657600080fd5b5035919050565b6000806000806000606086880312156110d557600080fd5b853567ffffffffffffffff808211156110ed57600080fd5b818801915088601f83011261110157600080fd5b81358181111561111057600080fd5b89602082850101111561112257600080fd5b60209283019750955090870135908082111561113d57600080fd5b818801915088601f83011261115157600080fd5b81358181111561116057600080fd5b8960208260051b850101111561117557600080fd5b96999598505060200195604001359392505050565b6000806040838503121561119d57600080fd5b50508035926020909101359150565b6001600160a01b038116811461064057600080fd5b6000602082840312156111d357600080fd5b81356111de816111ac565b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261124157600080fd5b83018035915067ffffffffffffffff82111561125c57600080fd5b60200191503681900382131561127157600080fd5b9250929050565b801515811461064057600080fd5b60008060006060848603121561129b57600080fd5b83356112a6816111ac565b925060208401356112b681611278565b929592945050506040919091013590565b6000602082840312156112d957600080fd5b81516111de81611278565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161133357611333611308565b5060000390565b808202811582820484141761135157611351611308565b92915050565b60008261137457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561138b57600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03948516815292841660208401529216604082015260608101919091526080019056fea264697066735822122060a04a4ca4ca707790df3d9b600848d35947bb8a59dcefbe2afe3417bd09d83664736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063895befc411610066578063895befc4146101435780638da5cb5b14610156578063d21220a714610167578063ddca3f431461018e578063f2fde38b146101c957600080fd5b80630dfe1681146100a357806318b20071146100e75780632930c564146100fc5780633593564c14610113578063715018a61461013b575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f53660046110a4565b6101dc565b005b61010560015481565b6040519081526020016100de565b6101266101213660046110bd565b61024b565b604080519283526020830191909152016100de565b6100fa6103c5565b6100fa61015136600461118a565b6103d9565b6000546001600160a01b03166100ca565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6101b57f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016100de565b6100fa6101d73660046111c1565b610605565b6101e4610643565b8060000361020557604051631f2a200560e01b815260040160405180910390fd5b600180549082905560408051828152602081018490527f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891015b60405180910390a15050565b6000808242111561027d576040516304be294560e31b8152600481018490524260248201526044015b60405180910390fd5b600186146102a2578686604051630211d4c160e51b81526004016102749291906111e5565b600184146102cd5760405163e92afc1360e01b81526001600482015260248101859052604401610274565b6000878760008181106102e2576102e2611214565b919091013560f81c915050801580159061030057508060ff16600114155b15610322578787604051630211d4c160e51b81526004016102749291906111e5565b60008060008888600081811061033a5761033a611214565b905060200281019061034c919061122a565b8101906103599190611286565b919450925090506001600160a01b0383166103875760405163d92e233d60e01b815260040160405180910390fd5b806000036103a857604051631f2a200560e01b815260040160405180910390fd5b6103b3838383610670565b95509550505050509550959350505050565b6103cd610643565b6103d76000611054565b565b6103e1610643565b811580156103ed575080155b1561040b57604051631f2a200560e01b815260040160405180910390fd5b81156104ed576040516340c10f1960e01b8152306004820152602481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a591906112c7565b9050806104eb577f0000000000000000000000000000000000000000000000000000000000000000308460405163505066fb60e11b8152600401610274939291906112e4565b505b80156105cf576040516340c10f1960e01b8152306004820152602481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058791906112c7565b9050806105cd577f0000000000000000000000000000000000000000000000000000000000000000308360405163505066fb60e11b8152600401610274939291906112e4565b505b60408051838152602081018390527f0636773915acccd62df05f47ffd34ead6011376bdc7ca7485d1f9df3f4b61fb4910161023f565b61060d610643565b6001600160a01b03811661063757604051631e4fbdf760e01b815260006004820152602401610274565b61064081611054565b50565b6000546001600160a01b031633146103d75760405163118cdaa760e01b8152336004820152602401610274565b600080600080841361068a576106858461131e565b61068c565b835b90508415610b73576000670de0b6b3a7640000600154836106ad919061133a565b6106b79190611357565b604051636eb1769f60e11b81523360048201523060248201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190611379565b905082811015610796577f000000000000000000000000000000000000000000000000000000000000000033848360405163246fb68960e21b81526004016102749493929190611392565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611379565b90508381101561086c577f0000000000000000000000000000000000000000000000000000000000000000338583604051630af4502d60e11b81526004016102749493929190611392565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f79190611379565b9050838110156109535760405163bac59adb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810185905260448101829052606401610274565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906109a690339030908b906004016112e4565b6020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e991906112c7565b905080610a31577f000000000000000000000000000000000000000000000000000000000000000033308860405163cd3f165960e01b815260040161027494939291906113bb565b60405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac491906112c7565b905080610b0c577f0000000000000000000000000000000000000000000000000000000000000000308c8760405163cd3f165960e01b815260040161027494939291906113bb565b604080518b15158152602081018890529081018690526001600160a01b038c16907fe467d5fa0f4dfdac4bf57d810740981998c5a70ea754dad39a1db51b4196948a9060600160405180910390a285610b648661131e565b9750975050505050505061104c565b600154600090610b8b83670de0b6b3a764000061133a565b610b959190611357565b604051636eb1769f60e11b81523360048201523060248201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190611379565b905082811015610c74577f000000000000000000000000000000000000000000000000000000000000000033848360405163246fb68960e21b81526004016102749493929190611392565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611379565b905083811015610d4a577f0000000000000000000000000000000000000000000000000000000000000000338583604051630af4502d60e11b81526004016102749493929190611392565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190611379565b905083811015610e315760405163bac59adb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810185905260448101829052606401610274565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610e8490339030908b906004016112e4565b6020604051808303816000875af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec791906112c7565b905080610f0f577f000000000000000000000000000000000000000000000000000000000000000033308860405163cd3f165960e01b815260040161027494939291906113bb565b60405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906112c7565b905080610fea577f0000000000000000000000000000000000000000000000000000000000000000308c8760405163cd3f165960e01b815260040161027494939291906113bb565b604080518b15158152602081018890529081018690526001600160a01b038c16907fe467d5fa0f4dfdac4bf57d810740981998c5a70ea754dad39a1db51b4196948a9060600160405180910390a26110418561131e565b975094955050505050505b935093915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156110b657600080fd5b5035919050565b6000806000806000606086880312156110d557600080fd5b853567ffffffffffffffff808211156110ed57600080fd5b818801915088601f83011261110157600080fd5b81358181111561111057600080fd5b89602082850101111561112257600080fd5b60209283019750955090870135908082111561113d57600080fd5b818801915088601f83011261115157600080fd5b81358181111561116057600080fd5b8960208260051b850101111561117557600080fd5b96999598505060200195604001359392505050565b6000806040838503121561119d57600080fd5b50508035926020909101359150565b6001600160a01b038116811461064057600080fd5b6000602082840312156111d357600080fd5b81356111de816111ac565b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261124157600080fd5b83018035915067ffffffffffffffff82111561125c57600080fd5b60200191503681900382131561127157600080fd5b9250929050565b801515811461064057600080fd5b60008060006060848603121561129b57600080fd5b83356112a6816111ac565b925060208401356112b681611278565b929592945050506040919091013590565b6000602082840312156112d957600080fd5b81516111de81611278565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161133357611333611308565b5060000390565b808202811582820484141761135157611351611308565b92915050565b60008261137457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561138b57600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03948516815292841660208401529216604082015260608101919091526080019056fea264697066735822122060a04a4ca4ca707790df3d9b600848d35947bb8a59dcefbe2afe3417bd09d83664736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MockPool.sol:MockPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/MockPool.sol:MockPool",
        "label": "CURRENT_PRICE_WETH_PER_USDC",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}